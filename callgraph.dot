digraph CallGraph {
  rankdir=LR;             // left -> right layout (subject to change)
  node [shape=box];       // Can change shape to ellipse, box, etc 

  "A";
  "B";
  "test";
  "foo";
  "bar";
  "Parser";
  "ParseRule";
  "Local";
  "Compiler";
  "currentChunk";
  "errorAt";
  "error";
  "errorAtCurrent";
  "advance";
  "consume";
  "check";
  "match";
  "emitByte";
  "emitBytes";
  "emitReturn";
  "makeConstant";
  "emitConstant";
  "initCompiler";
  "endCompiler";
  "beginScope";
  "endScope";
  "expression";
  "getRule";
  "parsePrecedence";
  "binary";
  "literal";
  "grouping";
  "number";
  "string";
  "resolveLocal";
  "namedVariable";
  "variable";
  "unary";
  "parsePrecedence";
  "identifierConstant";
  "identifiersEqual";
  "resolveLocal";
  "addLocal";
  "declareVariable";
  "parseVariable";
  "markInitialized";
  "defineVariable";
  "getRule";
  "expression";
  "block";
  "varDeclaration";
  "expressionStatement";
  "printStatement";
  "synchronize";
  "declaration";
  "statement";
  "compile";

  "bar" -> "foo";
  "error" -> "";
  "errorAtCurrent" -> "";
  "advance" -> "";
  "consume" -> "advance";
  "consume" -> "";
  "match" -> "advance";
  "emitBytes" -> "";
  "emitBytes" -> "";
  "endCompiler" -> "emitReturn";
  "endScope" -> "";
  "endScope" -> "";
  "endScope" -> "";
  "binary" -> "parsePrecedence";
  "grouping" -> "expression";
  "number" -> "";
  "string" -> "";
  "string" -> "";
  "string" -> "";
  "namedVariable" -> "";
  "namedVariable" -> "expression";
  "namedVariable" -> "";
  "variable" -> "";
  "unary" -> "parsePrecedence";
  "parsePrecedence" -> "advance";
  "parsePrecedence" -> "prefixRule";
  "parsePrecedence" -> "advance";
  "parsePrecedence" -> "infixRule";
  "resolveLocal" -> "";
  "resolveLocal" -> "";
  "addLocal" -> "";
  "declareVariable" -> "";
  "declareVariable" -> "";
  "declareVariable" -> "";
  "parseVariable" -> "declareVariable";
  "markInitialized" -> "";
  "defineVariable" -> "markInitialized";
  "expression" -> "parsePrecedence";
  "varDeclaration" -> "expression";
  "varDeclaration" -> "";
  "expressionStatement" -> "expression";
  "printStatement" -> "expression";
  "synchronize" -> "advance";
  "declaration" -> "varDeclaration";
  "declaration" -> "synchronize";
  "statement" -> "printStatement";
  "statement" -> "beginScope";
  "statement" -> "block";
  "statement" -> "endScope";
  "statement" -> "expressionStatement";
  "compile" -> "";
  "compile" -> "Compiler";
  "compile" -> "initCompiler";
  "compile" -> "advance";
  "compile" -> "declaration";
  "compile" -> "endCompiler";
}
